/* DO NOT MODIFY: This file is automatically generated */
#pragma once

#include "lattice_symmetries_types.h"
#include <stdint.h>

#if defined(__cplusplus)
extern "C" {
#endif

/* python-cffi: START */
ls_hs_symmetry * ls_hs_symmetry_from_json(char const *);
void ls_hs_destroy_symmetry(ls_hs_symmetry *);
int ls_hs_symmetry_sector(ls_hs_symmetry const*);
double ls_hs_symmetry_phase(ls_hs_symmetry const*);
int ls_hs_symmetry_length(ls_hs_symmetry const*);
int * ls_hs_symmetry_permutation(ls_hs_symmetry const*);
void ls_hs_destroy_permutation(int *);
ls_hs_symmetries * ls_hs_symmetries_from_json(char const *);
void ls_hs_destroy_symmetries(ls_hs_symmetries *);
ls_hs_basis * ls_hs_clone_basis(ls_hs_basis const*);
void ls_hs_destroy_basis(ls_hs_basis *);
ls_hs_basis * ls_hs_basis_from_json(char const *);
char const * ls_hs_basis_to_json(ls_hs_basis const*);
void ls_hs_destroy_string(char const *);
uint64_t ls_hs_min_state_estimate(ls_hs_basis const*);
uint64_t ls_hs_max_state_estimate(ls_hs_basis const*);
bool ls_hs_basis_has_fixed_hamming_weight(ls_hs_basis const*);
bool ls_hs_basis_has_spin_inversion_symmetry(ls_hs_basis const*);
bool ls_hs_basis_has_permutation_symmetries(ls_hs_basis const*);
bool ls_hs_basis_requires_projection(ls_hs_basis const*);
void ls_hs_basis_build(ls_hs_basis const*);
bool ls_hs_basis_is_built(ls_hs_basis const*);
int ls_hs_basis_number_bits(ls_hs_basis const*);
int ls_hs_basis_number_words(ls_hs_basis const*);
char const * ls_hs_basis_state_to_string(ls_hs_basis const*, uint64_t const*);
ptrdiff_t ls_hs_fixed_hamming_state_to_index(uint64_t);
uint64_t ls_hs_fixed_hamming_index_to_state(ptrdiff_t, int);
char const * ls_hs_expr_to_json(ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_from_json(char const *);
void ls_hs_destroy_expr(ls_hs_expr *);
char const * ls_hs_expr_to_string(ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_plus(ls_hs_expr const*, ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_minus(ls_hs_expr const*, ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_times(ls_hs_expr const*, ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_scale(ls_hs_scalar const*, ls_hs_expr const*);
ls_hs_expr * ls_hs_replace_indices(ls_hs_expr const*, ls_hs_index_replacement_type);
bool ls_hs_expr_equal(ls_hs_expr const*, ls_hs_expr const*);
ls_hs_expr * ls_hs_expr_adjoint(ls_hs_expr const*);
bool ls_hs_expr_is_hermitian(ls_hs_expr const*);
bool ls_hs_expr_is_real(ls_hs_expr const*);
bool ls_hs_expr_is_identity(ls_hs_expr const*);
ls_hs_operator * ls_hs_create_operator(ls_hs_basis const*, ls_hs_expr const*);
ls_hs_operator * ls_hs_clone_operator(ls_hs_operator const*);
void ls_hs_destroy_operator(ls_hs_operator *);
int ls_hs_operator_max_number_off_diag(ls_hs_operator *);
ls_hs_expr * ls_hs_operator_get_expr(ls_hs_operator const*);
ls_hs_basis * ls_hs_operator_get_basis(ls_hs_operator const*);
void ls_hs_prepare_hphi(ls_hs_operator const*, char const *);
void ls_hs_prepare_mvmc(ls_hs_operator const*, char const *);
ls_hs_yaml_config * ls_hs_load_yaml_config(char const *);
void ls_hs_destroy_yaml_config(ls_hs_yaml_config *);
/* python-cffi: STOP */

#if defined(__cplusplus)
} // extern "C"
#endif
